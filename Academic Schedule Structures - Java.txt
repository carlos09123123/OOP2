import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public abstract class ScheduleStructure {
    private int currentPeriodNumber; // 1 - First Semester, 2 - Second Semester

    public ScheduleStructure(int currentPeriodNumber) {
        this.currentPeriodNumber = currentPeriodNumber;
    }

    public int getCurrentPeriodNumber() {
        return currentPeriodNumber;
    }

    public abstract long getDaysRemaining();
    public abstract long getDaysUntilNextPeriod();
    
    protected long daysBetween(LocalDate start, LocalDate end) {
        return ChronoUnit.DAYS.between(start, end);
    }
}

import java.time.LocalDate;

public class SchoolYearSchedule extends ScheduleStructure {
    private LocalDate start;
    private LocalDate end;
    private LocalDate currentDate;

    public SchoolYearSchedule(LocalDate currentDate, 
                            LocalDate start, 
                            LocalDate end) {
        super(1); // School year has only one period
        this.currentDate = currentDate;
        this.start = start;
        this.end = end;
    }

    @Override
    public long getDaysRemaining() {
        return daysBetween(currentDate, end);
    }

    @Override
    public long getDaysUntilNextPeriod() {
        LocalDate nextYearStart = start.plusYears(1);
        return daysBetween(currentDate, nextYearStart);
    }
}

import java.time.LocalDate;

public class SemestralSchedule extends ScheduleStructure {
    private LocalDate[] pairs; // [0]=Sem1 Start, [1]=Sem1 End, [2]=Sem2 Start, [3]=Sem2 End
    private LocalDate currentDate;

    public SemestralSchedule(LocalDate currentDate, 
                           LocalDate sem1Start, LocalDate sem1End,
                           LocalDate sem2Start, LocalDate sem2End,
                           int currentPeriodNumber) {
        super(currentPeriodNumber);
        this.currentDate = currentDate;
        this.pairs = new LocalDate[]{sem1Start, sem1End, sem2Start, sem2End};
    }

    @Override
    public long getDaysRemaining() {
        int index = (getCurrentPeriodNumber() == 1) ? 1 : 3;
        return daysBetween(currentDate, pairs[index]);
    }

    @Override
    public long getDaysUntilNextPeriod() {
        if (getCurrentPeriodNumber() == 1) {
            return daysBetween(currentDate, pairs[2]); // Days until Sem2 starts
        } else {
            LocalDate nextSem1Start = pairs[0].plusYears(1);
            return daysBetween(currentDate, nextSem1Start);
        }
    }
}